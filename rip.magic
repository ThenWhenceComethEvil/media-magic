#!/bin/bash
# Newest version of media magic, emphasizing legibility and extensibility. Aims
# to support DVDs (Movies & Shows separately), and music CDs. I'm dipping the
# hashing functionality present in the version of media magic for Mom & Papa. I
# don't have the same use-case.
#
# shellcheck disable=SC2312
#-------------------------------------------------------------------------------

# Limit tomfoolery.
set -e
trap 'sudo umount /dev/cdrom  2>/dev/null  && eject' EXIT

if [[ $(id -u) -eq 0 ]] ; then
   echo "May not be run as root." 2>&1
   exit 1
fi


function usage {
cat <<EOF
usage: ${BASH_SOURCE[0]##*/} <command>

commands:
   show        rips DVD, moves output to ${SHOW_DIR}
   movie       rips DVD, moves output to ${MOVIE_DIR}
   music WHO   rips CD, expecting \`marcus' or \`ginny'
EOF

exit "$1"
}

#
#--- Directory structure -------------------------------------------------------
#

declare -g BASEDIR='/tidepool/media'

# Shows:
declare SHOW_DIR="${BASEDIR}/Shows"
mkdir -p "${SHOW_DIR}"/{processing,vobs,sort_me_daddy}
# Shows
#  ├── processing
#  ├── vobs
#  └── sort_me_daddy

declare MOVIE_DIR="${BASEDIR}/Movies"
mkdir -p "${MOVIE_DIR}"/{processing,vobs,sort_me_daddy}
# Movies
#  ├── processing
#  ├── vobs
#  └── sort_me_daddy

declare MUSIC_DIR="${BASEDIR}/Music"
mkdir -p "${MUSIC_DIR}"/{processing,flac,mp3}
# Music
#  ├── processing
#  ├── flac
#  │    ├── Ginny/
#  │    └── Marcus/
#  └── mp3
#       ├── Ginny/
#       └── Marcus/

#
#--- Show / Movie --------------------------------------------------------------
#

# vobcopy may only be run on a mounted DVD.
declare -g DVD_MOUNTPOINT='/mnt/cdrom/'


function rip_dvd {
   local outdir="$1"

   sudo mount /dev/cdrom "${DVD_MOUNTPOINT}"

   # Output of `lsdvd` is used to
   #  1. Identify longest track for future runs of HandBrakeCLI
   #  2. Save metadata in output directory for future reference
   local lsdvd
   lsdvd=$( lsdvd /dev/cdrom )

   local dvd_name
   dvd_name=$( awk '/^Disc Title/ {print $3}' <<< "${lsdvd}" )

   local params=(
      --force    # vobcopy thinks there's insufficient space lel.
      --mirror
      --name "${dvd_name}"
      --input-dir "${DVD_MOUNTPOINT}"
      --output-dir "${outdir}/processing/"
   )
   vobcopy "${params[@]}"

   local processing="${outdir}/processing/${dvd_name}"

   # Useful if we need to re-HandBrakeCLI, largely for movies.
   local longest
   longest=$( awk '/^Longest track:/ {print $3}' <<< "${lsdvd}" )

   echo "${longest}" > "${processing}/longest_track"
   echo "${lsdvd}"   > "${processing}/lsdvd-output"

   # Loop until unique:
   local _dst="${outdir}/vobs/${dvd_name}"
   local dst="${_dst}"
   local -i idx=0

   while [[ -d "${dst}" ]] ; do
      dst="${_dst}_$(( ++idx ))"
   done

   mv "${processing}" "${dst}"

   #                               handbrake
   #----------------------------------------------------------------------------
   # To avoid needing to constantly update the following section in parallel
   # with `rip.brake`, could alternatively just call it here.

   local final="${outdir}/sort_me_daddy/${dst##*/}"
   mkdir -p "${final}"

   HandBrakeCLI                                       \
      --scan                                          \
      --min-duration 60                               \
      --title 0                                       \
      --input "${dst}/VIDEO_TS"                       \
      2>&1                                            \
   | awk '/+\stitle\s/ {sub(/:/, "", $3); print $3}'  \
   | xargs -I{} HandBrakeCLI                          \
      --title {}                                      \
      --input "${dst}/VIDEO_TS"                       \
      --output "${final}/{}.mp4"
}

#
#--- Music ---------------------------------------------------------------------
#

function rip_music {
   local outdir="$1"
   local whom="$2"

   (  if flock -e -n 100 ; then
         export OUTPUTDIR=/tidepool/media/Music/${whom}/
         /usr/bin/abcde -N
      else
         printf "Couldn't acquire lock\n"  1>&2
         exit 3
      fi
   ) 100>"${outdir}/processing/rip.lock"
}

#                                   
#--- engage! -------------------------------------------------------------------
#

declare -a action=()

case "$1" in
   'help' | '-h' | '--help')
      usage 0 ;;

   'show')
      action=( rip_dvd "${SHOW_DIR}" )
      ;;

   'movie')
      action=( rip_dvd "${MOVIE_DIR}" )
      ;;

   'music')
      shift

      if [[ ! "$1" =~ (marcus|ginny) ]] ; then
         { printf 'Expecting either:\n'
           printf '  rip.magic music ginny\n'
           printf '  rip.magic music marcus\n'
         } >&2
         exit 3
      fi

      action=( rip_music "${MUSIC_DIR}" "${1,,}" )
      ;;

   *) usage 1 ;;
esac

# Wait until the DVD/CD is actually mounted and readable. `wodim` seems to fully
# pause execution (if a disk is inserted) until we can proceed.
declare -i retries=5
while (( retries )); do
   # ref: https://linux.die.net/man/2/wodim
   wodim dev=/dev/cdrom -atip &>/dev/null && break
   sleep 1
   (( --retries))
done

# Readable disk not found.
(( retries )) || exit 1

"${action[@]}"
